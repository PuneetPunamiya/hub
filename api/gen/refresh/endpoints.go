// Code generated by goa v3.2.2, DO NOT EDIT.
//
// refresh endpoints
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package refresh

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "refresh" service endpoints.
type Endpoints struct {
	CatalogRefresh goa.Endpoint
}

// NewEndpoints wraps the methods of the "refresh" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CatalogRefresh: NewCatalogRefreshEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "refresh" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CatalogRefresh = m(e.CatalogRefresh)
}

// NewCatalogRefreshEndpoint returns an endpoint function that calls the method
// "CatalogRefresh" of service "refresh".
func NewCatalogRefreshEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CatalogRefreshPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write", "agent:create", "catalog:refresh"},
			RequiredScopes: []string{"catalog:refresh"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.CatalogRefresh(ctx, p)
	}
}
