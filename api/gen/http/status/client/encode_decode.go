// Code generated by goa v3.2.2, DO NOT EDIT.
//
// status HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	status "github.com/tektoncd/hub/api/gen/status"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "status" service "Status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusStatusPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("status", "Status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStatusResponse returns a decoder for responses returned by the status
// Status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("status", "Status", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateServerResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("status", "Status", err)
			}
			res := NewStatusServerOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("status", "Status", resp.StatusCode, string(body))
		}
	}
}

// unmarshalServerResponseToStatusServer builds a value of type *status.Server
// from a value of type *ServerResponse.
func unmarshalServerResponseToStatusServer(v *ServerResponse) *status.Server {
	res := &status.Server{}
	res.Services = make([]*status.Services, len(v.Services))
	for i, val := range v.Services {
		res.Services[i] = unmarshalServicesResponseToStatusServices(val)
	}

	return res
}

// unmarshalServicesResponseToStatusServices builds a value of type
// *status.Services from a value of type *ServicesResponse.
func unmarshalServicesResponseToStatusServices(v *ServicesResponse) *status.Services {
	res := &status.Services{
		Name:   *v.Name,
		Status: *v.Status,
	}

	return res
}
