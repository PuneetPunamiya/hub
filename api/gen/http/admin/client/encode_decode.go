// Code generated by goa v3.2.2, DO NOT EDIT.
//
// admin HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	admin "github.com/tektoncd/hub/api/gen/admin"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateAgentRequest instantiates a HTTP request object with method and
// path set to call the "admin" service "CreateAgent" endpoint
func (c *Client) BuildCreateAgentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAgentAdminPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("admin", "CreateAgent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAgentRequest returns an encoder for requests sent to the admin
// CreateAgent server.
func EncodeCreateAgentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*admin.CreateAgentPayload)
		if !ok {
			return goahttp.ErrInvalidType("admin", "CreateAgent", "*admin.CreateAgentPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateAgentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("admin", "CreateAgent", err)
		}
		return nil
	}
}

// DecodeCreateAgentResponse returns a decoder for responses returned by the
// admin CreateAgent endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateAgentResponse may return the following errors:
//	- "invalid-payload" (type *goa.ServiceError): http.StatusBadRequest
//	- "invalid-token" (type *goa.ServiceError): http.StatusUnauthorized
//	- "invalid-scopes" (type *goa.ServiceError): http.StatusForbidden
//	- "internal-error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateAgentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateAgentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin", "CreateAgent", err)
			}
			err = ValidateCreateAgentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("admin", "CreateAgent", err)
			}
			res := NewCreateAgentResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateAgentInvalidPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin", "CreateAgent", err)
			}
			err = ValidateCreateAgentInvalidPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("admin", "CreateAgent", err)
			}
			return nil, NewCreateAgentInvalidPayload(&body)
		case http.StatusUnauthorized:
			var (
				body CreateAgentInvalidTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin", "CreateAgent", err)
			}
			err = ValidateCreateAgentInvalidTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("admin", "CreateAgent", err)
			}
			return nil, NewCreateAgentInvalidToken(&body)
		case http.StatusForbidden:
			var (
				body CreateAgentInvalidScopesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin", "CreateAgent", err)
			}
			err = ValidateCreateAgentInvalidScopesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("admin", "CreateAgent", err)
			}
			return nil, NewCreateAgentInvalidScopes(&body)
		case http.StatusInternalServerError:
			var (
				body CreateAgentInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("admin", "CreateAgent", err)
			}
			err = ValidateCreateAgentInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("admin", "CreateAgent", err)
			}
			return nil, NewCreateAgentInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("admin", "CreateAgent", resp.StatusCode, string(body))
		}
	}
}
