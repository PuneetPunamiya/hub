// Code generated by goa v3.2.2, DO NOT EDIT.
//
// refresh HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	refresh "github.com/tektoncd/hub/api/gen/refresh"
	goahttp "goa.design/goa/v3/http"
)

// BuildCatalogRefreshRequest instantiates a HTTP request object with method
// and path set to call the "refresh" service "CatalogRefresh" endpoint
func (c *Client) BuildCatalogRefreshRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CatalogRefreshRefreshPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("refresh", "CatalogRefresh", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCatalogRefreshRequest returns an encoder for requests sent to the
// refresh CatalogRefresh server.
func EncodeCatalogRefreshRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*refresh.CatalogRefreshPayload)
		if !ok {
			return goahttp.ErrInvalidType("refresh", "CatalogRefresh", "*refresh.CatalogRefreshPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeCatalogRefreshResponse returns a decoder for responses returned by the
// refresh CatalogRefresh endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeCatalogRefreshResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("refresh", "CatalogRefresh", resp.StatusCode, string(body))
		}
	}
}
