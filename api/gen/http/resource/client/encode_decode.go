// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAllResourcesRequest instantiates a HTTP request object with method and
// path set to call the "resource" service "AllResources" endpoint
func (c *Client) BuildAllResourcesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AllResourcesResourcePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "AllResources", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAllResourcesRequest returns an encoder for requests sent to the
// resource AllResources server.
func EncodeAllResourcesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*resource.AllResourcesPayload)
		if !ok {
			return goahttp.ErrInvalidType("resource", "AllResources", "*resource.AllResourcesPayload", v)
		}
		values := req.URL.Query()
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAllResourcesResponse returns a decoder for responses returned by the
// resource AllResources endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAllResourcesResponse may return the following errors:
//	- "db-down" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeAllResourcesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AllResourcesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "AllResources", err)
			}
			p := NewAllResourcesResourceCollectionOK(body)
			view := "extended"
			vres := resourceviews.ResourceCollection{Projected: p, View: view}
			if err = resourceviews.ValidateResourceCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("resource", "AllResources", err)
			}
			res := resource.NewResourceCollection(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body AllResourcesDbDownResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "AllResources", err)
			}
			err = ValidateAllResourcesDbDownResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resource", "AllResources", err)
			}
			return nil, NewAllResourcesDbDown(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "AllResources", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceResponseToResourceviewsResourceView builds a value of type
// *resourceviews.ResourceView from a value of type *ResourceResponse.
func unmarshalResourceResponseToResourceviewsResourceView(v *ResourceResponse) *resourceviews.ResourceView {
	res := &resourceviews.ResourceView{
		ID:            v.ID,
		Name:          v.Name,
		DisplayName:   v.DisplayName,
		Type:          v.Type,
		Description:   v.Description,
		LatestVersion: v.LatestVersion,
		Rating:        v.Rating,
		LastUpdatedAt: v.LastUpdatedAt,
	}
	res.Catalog = unmarshalCatalogResponseToResourceviewsCatalogView(v.Catalog)
	res.Tags = make([]*resourceviews.TagView, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = unmarshalTagResponseToResourceviewsTagView(val)
	}
	res.Versions = make([]*resourceviews.VersionsView, len(v.Versions))
	for i, val := range v.Versions {
		res.Versions[i] = unmarshalVersionsResponseToResourceviewsVersionsView(val)
	}

	return res
}

// unmarshalCatalogResponseToResourceviewsCatalogView builds a value of type
// *resourceviews.CatalogView from a value of type *CatalogResponse.
func unmarshalCatalogResponseToResourceviewsCatalogView(v *CatalogResponse) *resourceviews.CatalogView {
	res := &resourceviews.CatalogView{
		ID:   v.ID,
		Type: v.Type,
	}

	return res
}

// unmarshalTagResponseToResourceviewsTagView builds a value of type
// *resourceviews.TagView from a value of type *TagResponse.
func unmarshalTagResponseToResourceviewsTagView(v *TagResponse) *resourceviews.TagView {
	res := &resourceviews.TagView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalVersionsResponseToResourceviewsVersionsView builds a value of type
// *resourceviews.VersionsView from a value of type *VersionsResponse.
func unmarshalVersionsResponseToResourceviewsVersionsView(v *VersionsResponse) *resourceviews.VersionsView {
	res := &resourceviews.VersionsView{
		VersionID: v.VersionID,
		Version:   v.Version,
	}

	return res
}
