// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goa "goa.design/goa/v3/pkg"
)

// AllResourcesResponseBody is the type of the "resource" service
// "AllResources" endpoint HTTP response body.
type AllResourcesResponseBody []*ResourceResponse

// AllResourcesDbDownResponseBody is the type of the "resource" service
// "AllResources" endpoint HTTP response body for the "db-down" error.
type AllResourcesDbDownResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResourceResponse is used to define fields on response body types.
type ResourceResponse struct {
	// ID is the unique id of the resource
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the resource
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Display name of the resource
	DisplayName *string `form:"displayName,omitempty" json:"displayName,omitempty" xml:"displayName,omitempty"`
	// Type of catalog where resource belongs
	Catalog *CatalogResponse `form:"catalog,omitempty" json:"catalog,omitempty" xml:"catalog,omitempty"`
	// Type of resource
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Description of resource
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Latest version o resource
	LatestVersion *string `form:"latest_version,omitempty" json:"latest_version,omitempty" xml:"latest_version,omitempty"`
	// Tags related to resources
	Tags []*TagResponse `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Rating of resource
	Rating *uint `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	// Date when resource was last updated
	LastUpdatedAt *string `form:"last_updated_at,omitempty" json:"last_updated_at,omitempty" xml:"last_updated_at,omitempty"`
	// Version of resource
	Versions []*VersionsResponse `form:"versions,omitempty" json:"versions,omitempty" xml:"versions,omitempty"`
}

// CatalogResponse is used to define fields on response body types.
type CatalogResponse struct {
	// ID is the unique id of the catalog
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Type of catalog
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// TagResponse is used to define fields on response body types.
type TagResponse struct {
	// Id is the unique id of tags
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name of tag
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// VersionsResponse is used to define fields on response body types.
type VersionsResponse struct {
	// Version ID of the resource to be fetched
	VersionID *uint `form:"versionId,omitempty" json:"versionId,omitempty" xml:"versionId,omitempty"`
	// Version of the resource to be fetched
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// NewAllResourcesResourceCollectionOK builds a "resource" service
// "AllResources" endpoint result from a HTTP "OK" response.
func NewAllResourcesResourceCollectionOK(body AllResourcesResponseBody) resourceviews.ResourceCollectionView {
	v := make([]*resourceviews.ResourceView, len(body))
	for i, val := range body {
		v[i] = unmarshalResourceResponseToResourceviewsResourceView(val)
	}
	return v
}

// NewAllResourcesDbDown builds a resource service AllResources endpoint
// db-down error.
func NewAllResourcesDbDown(body *AllResourcesDbDownResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateAllResourcesDbDownResponseBody runs the validations defined on
// AllResources_db-down_Response_Body
func ValidateAllResourcesDbDownResponseBody(body *AllResourcesDbDownResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResourceResponse runs the validations defined on ResourceResponse
func ValidateResourceResponse(body *ResourceResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.DisplayName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("displayName", "body"))
	}
	if body.Catalog == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("catalog", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.LatestVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("latest_version", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "body"))
	}
	if body.LastUpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_updated_at", "body"))
	}
	if body.Versions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("versions", "body"))
	}
	if body.Catalog != nil {
		if err2 := ValidateCatalogResponse(body.Catalog); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Tags {
		if e != nil {
			if err2 := ValidateTagResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Versions {
		if e != nil {
			if err2 := ValidateVersionsResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCatalogResponse runs the validations defined on CatalogResponse
func ValidateCatalogResponse(body *CatalogResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}

// ValidateTagResponse runs the validations defined on TagResponse
func ValidateTagResponse(body *TagResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateVersionsResponse runs the validations defined on VersionsResponse
func ValidateVersionsResponse(body *VersionsResponse) (err error) {
	if body.VersionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("versionId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}
