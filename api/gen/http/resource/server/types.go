// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource HTTP server types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goa "goa.design/goa/v3/pkg"
)

// ResourceResponseExtendedCollection is the type of the "resource" service
// "AllResources" endpoint HTTP response body.
type ResourceResponseExtendedCollection []*ResourceResponseExtended

// AllResourcesDbDownResponseBody is the type of the "resource" service
// "AllResources" endpoint HTTP response body for the "db-down" error.
type AllResourcesDbDownResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResourceResponseExtended is used to define fields on response body types.
type ResourceResponseExtended struct {
	// ID is the unique id of the resource
	ID uint `form:"id" json:"id" xml:"id"`
	// Name of the resource
	Name string `form:"name" json:"name" xml:"name"`
	// Display name of the resource
	DisplayName string `form:"displayName" json:"displayName" xml:"displayName"`
	// Type of catalog where resource belongs
	Catalog *CatalogResponse `form:"catalog" json:"catalog" xml:"catalog"`
	// Type of resource
	Type string `form:"type" json:"type" xml:"type"`
	// Description of resource
	Description string `form:"description" json:"description" xml:"description"`
	// Latest version o resource
	LatestVersion string `form:"latest_version" json:"latest_version" xml:"latest_version"`
	// Tags related to resources
	Tags []*TagResponse `form:"tags" json:"tags" xml:"tags"`
	// Rating of resource
	Rating uint `form:"rating" json:"rating" xml:"rating"`
	// Date when resource was last updated
	LastUpdatedAt string `form:"last_updated_at" json:"last_updated_at" xml:"last_updated_at"`
}

// CatalogResponse is used to define fields on response body types.
type CatalogResponse struct {
	// ID is the unique id of the catalog
	ID uint `form:"id" json:"id" xml:"id"`
	// Type of catalog
	Type string `form:"type" json:"type" xml:"type"`
}

// TagResponse is used to define fields on response body types.
type TagResponse struct {
	// Id is the unique id of tags
	ID uint `form:"id" json:"id" xml:"id"`
	// name of tag
	Name string `form:"name" json:"name" xml:"name"`
}

// NewResourceResponseExtendedCollection builds the HTTP response body from the
// result of the "AllResources" endpoint of the "resource" service.
func NewResourceResponseExtendedCollection(res resourceviews.ResourceCollectionView) ResourceResponseExtendedCollection {
	body := make([]*ResourceResponseExtended, len(res))
	for i, val := range res {
		body[i] = marshalResourceviewsResourceViewToResourceResponseExtended(val)
	}
	return body
}

// NewAllResourcesDbDownResponseBody builds the HTTP response body from the
// result of the "AllResources" endpoint of the "resource" service.
func NewAllResourcesDbDownResponseBody(res *goa.ServiceError) *AllResourcesDbDownResponseBody {
	body := &AllResourcesDbDownResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAllResourcesPayload builds a resource service AllResources endpoint
// payload.
func NewAllResourcesPayload(limit uint) *resource.AllResourcesPayload {
	v := &resource.AllResourcesPayload{}
	v.Limit = limit

	return v
}
