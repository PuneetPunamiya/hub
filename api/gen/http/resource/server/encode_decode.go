// Code generated by goa v3.1.3, DO NOT EDIT.
//
// resource HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	"context"
	"net/http"
	"strconv"

	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAllResourcesResponse returns an encoder for responses returned by the
// resource AllResources endpoint.
func EncodeAllResourcesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(resourceviews.ResourceCollection)
		enc := encoder(ctx, w)
		body := NewResourceResponseExtendedCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAllResourcesRequest returns a decoder for requests sent to the
// resource AllResources endpoint.
func DecodeAllResourcesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			limit uint
			err   error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 100
			} else {
				v, err2 := strconv.ParseUint(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "unsigned integer"))
				}
				limit = uint(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewAllResourcesPayload(limit)

		return payload, nil
	}
}

// EncodeAllResourcesError returns an encoder for errors returned by the
// AllResources resource endpoint.
func EncodeAllResourcesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "db-down":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAllResourcesDbDownResponseBody(res)
			}
			w.Header().Set("goa-error", "db-down")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalResourceviewsResourceViewToResourceResponseExtended builds a value of
// type *ResourceResponseExtended from a value of type
// *resourceviews.ResourceView.
func marshalResourceviewsResourceViewToResourceResponseExtended(v *resourceviews.ResourceView) *ResourceResponseExtended {
	res := &ResourceResponseExtended{
		ID:            *v.ID,
		Name:          *v.Name,
		DisplayName:   *v.DisplayName,
		Type:          *v.Type,
		Description:   *v.Description,
		LatestVersion: *v.LatestVersion,
		Rating:        *v.Rating,
		LastUpdatedAt: *v.LastUpdatedAt,
	}
	if v.Catalog != nil {
		res.Catalog = marshalResourceviewsCatalogViewToCatalogResponse(v.Catalog)
	}
	if v.Tags != nil {
		res.Tags = make([]*TagResponse, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = marshalResourceviewsTagViewToTagResponse(val)
		}
	}

	return res
}

// marshalResourceviewsCatalogViewToCatalogResponse builds a value of type
// *CatalogResponse from a value of type *resourceviews.CatalogView.
func marshalResourceviewsCatalogViewToCatalogResponse(v *resourceviews.CatalogView) *CatalogResponse {
	res := &CatalogResponse{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// marshalResourceviewsTagViewToTagResponse builds a value of type *TagResponse
// from a value of type *resourceviews.TagView.
func marshalResourceviewsTagViewToTagResponse(v *resourceviews.TagView) *TagResponse {
	res := &TagResponse{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}
